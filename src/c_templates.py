class c_templates(object):
    def __init__(self):
        pass

    self.device_info_header = """
#ifndef __ETHERCAT_DEVICE_INFO_H
#define __ETHERCAT_DEVICE_INFO_H

/*
 * This file is automatically generated from the EtherCATInfo xml files.
 * Please refrain from modifying this file by hand.
 */

#include <stdlib.h> /* For `size_t` */
#include <stdint.h> /* For fixed sized integer definitions */

#define MAX_STRING_LEN 256
"""
    self.device_info_footer = """
#endif /* __ETHERCAT_DEVICE_INFO_H */
"""
    self.device_list_header = """#ifndef __ETHERCAT_DEVICE_INFO_LIST_H
#define __ETHERCAT_DEVICE_INFO_LIST_H

/*
 * This file is automatically generated from the EtherCATInfo xml files.
 * Please refrain from modifying this file by hand.
 */

#include "ethercat_device_info.h"

"""
    self.device_list_footer = """
#endif /* __ETHERCAT_DEVICE_INFO_LIST_H */
"""
    self.header_device_struct_defn = """
/**
 * Describes the device info and assigned device
 * identifier for the lookup operations
 */
struct ec_device {
    uint32_t db_index;
    uint32_t vendor_id;
    uint32_t product_code;
    uint32_t revision_no;
    char type[MAX_STRING_LEN];
};
"""
    self.header_pdo_entry_info = """
/**
 * Describes the default direction
 * of transfer for the PDO entry
 */
typedef enum {
    UKN = 0,                    /** To avoid errors with default null values */
    TX  = 1,                    /** Transmit direction ( slave -> master )   */
    RX  = 2,                    /** Receive direction  ( slave <- master )   */
} pdo_dir;

/**
 * Describes the `BaseDataType`s allowed
 * in the PDO data TX/RX transfers
 */
typedef enum {
//  TYPE:  (BIT_SIZE): DESCRIPTION
    BDT_BOOL,     /** ( 1): Boolean value ; 0 == False, 1 == True */
    BDT_BIT,      /** ( 1): Bit value ; 0 == False, 1 == True     */
    BDT_BYTE,     /** ( 8): 1 Octet                               */
    BDT_WORD,     /** (16): 2 Octets                              */
    BDT_DWORD,    /** (32): 4 Octets                              */
    BDT_BIT1,     /** ( 1): Bit length value of size 1            */
    BDT_BIT2,     /** ( 2): Bit length value of size 2            */
    BDT_BIT3,     /** ( 3): Bit length value of size 3            */
    BDT_BIT4,     /** ( 4): Bit length value of size 4            */
    BDT_BIT5,     /** ( 5): Bit length value of size 5            */
    BDT_BIT6,     /** ( 6): Bit length value of size 6            */
    BDT_BIT7,     /** ( 7): Bit length value of size 7            */
    BDT_BIT8,     /** ( 8): Bit length value of size 8            */
    BDT_BITARR8,  /** ( 8): Array of 8 bits                       */
    BDT_BITARR16, /** (16): Array of 16 bits                      */
    BDT_BITARR32, /** (32): Array of 32 bits                      */
    BDT_SINT,     /** ( 8): Short Integer                         */
    BDT_INT,      /** (16): Integer                               */
    BDT_INT24,    /** (24): 24 Bit Integer                        */
    BDT_DINT,     /** (32): Double Integer                        */
    BDT_INT40,    /** (40): 40 Bit Integer                        */
    BDT_INT48,    /** (48): 48 Bit Integer                        */
    BDT_INT52,    /** (52): 52 Bit Integer                        */
    BDT_LINT,     /** (64): Long Integer                          */
    BDT_USINT,    /** ( 8): Unsigned Short Integer                */
    BDT_UINT,     /** (16): Unsigned Integer                      */
    BDT_UINT16,   /** (16): Unsigned 16 Bit Integer               */
    BDT_UINT24,   /** (24): Unsigned 24 Bit Integer               */
    BDT_UDINT,    /** (32): Unsigned Double Integer               */
    BDT_UINT40,   /** (40): Unsigned 40 Bit Integer               */
    BDT_UINT48,   /** (48): Unsigned 48 Bit Integer               */
    BDT_UINT52,   /** (52): Unsigned 52 Bit Integer               */
    BDT_ULINT,    /** (64): Unsigned Long Integer                 */
    BDT_REAL,     /** (32): Real Number / Floating Point          */
    BDT_LREAL,    /** (64): Real Number / Long Floating Point     */
    BDT_GUID,     /** (128): Global Unique Identifier             */
} base_data_t;

/**
 * Holds the extracted PDO information
 * from the XML device description
 */
struct pdo_entry_info {
    uint32_t    db_index;         /** The device identifier                 */
    uint16_t    index;            /** The CAN Address of the data           */
    uint8_t     subindex;         /** The CAN Sub-Index of the data         */
    uint8_t     bit_length;       /** The bit length of the data            */
    pdo_dir     direction;        /** The direction {Transmit | Receive}    */
    uint8_t     sync_manager;     /** The default Sync Manager for the data */
    size_t      name_idx;         /** The index into the PDO string list    */
    base_data_t data_type;        /** The index into the PDO string list    */
};

/**
 * Entries of the PDO entry description string
 */
struct pdo_string_entry {
    size_t index;                  /** The index of the string               */
    char   string[MAX_STRING_LEN]; /** The pdo description string            */
};

"""
    self.test_c_main_txt = """
#include <stdio.h>
#include <assert.h>
#include <stdint.h>
#include "ethercat_device_info.h"
#include "ethercat_device_list.h"
int main () {
    size_t dev_count = sizeof(ec_devices)/sizeof(struct ec_device);
    //size_t pdo_count = sizeof(pdo_entries)/sizeof(struct pdo_entry_info);
    // These are the actual counts of the objects minus the blank object
    // at the end and the 1 for indexing
    dev_count -= 2;

    struct ec_device *dev = ec_devices;
    for (unsigned int idx = 0; idx < dev_count; idx++, dev++) {}
    assert(dev_count == dev->db_index);
    return 0;
}
"""
